{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","today_date","Date","greeting","curr_hours","getHours","weekday","Array","day_of_week","getDay","ReactDOM","render","Fragment","className","toLocaleTimeString","toLocaleDateString","contenteditable","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAMIC,EAAa,IAAIC,KAAK,KAAM,EAAG,GAAI,IAEnCC,EAAW,GACXC,EAAaH,EAAWI,WAE1BF,EADEC,GAAc,GAAKA,GAAc,GACxB,eACFA,GAAc,IAAMA,GAAc,GAChC,iBAEA,aAGb,IAAIE,EAAU,IAAIC,MAAM,GACxBD,EAAQ,GAAK,SACbA,EAAQ,GAAK,SACbA,EAAQ,GAAK,UACbA,EAAQ,GAAK,YACbA,EAAQ,GAAK,WACbA,EAAQ,GAAK,SACbA,EAAQ,GAAK,WAEb,IAAIE,EAAcF,EAAQL,EAAWQ,UAErCC,IAASC,OASP,kBAAC,IAAMC,SAAP,KACE,wBAAIC,UAAU,eAAd,SAvCY,UAuCZ,KAA8CV,EAA9C,MACA,yBAAKU,UAAU,YACb,wBAAIA,UAAU,aAAaZ,EAAWa,uBAExC,wBAAID,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,eAAeZ,EAAWc,mBAAmB,UAC3D,6BAAM,6BAAM,6BASZ,wBAAIF,UAAU,iBAAd,UACA,uBAAGG,gBAAgB,OAAOH,UAAU,eAApC,iFACA,6BAAM,6BAAM,6BAAM,6BAAM,6BAAM,6BAAM,6BAAM,6BAqB1C,wBAAIA,UAAU,eAAd,UA7EY,UA6EZ,YA5Ec,cA8EhBI,SAASC,eAAe,SD8CpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bcbfe6b3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst my_name = \"Samihan\"\nconst last_name = \"Deshmukh\"\n\n//var today_date = new Date();\n//var today_date = new Date(2020, 7, 18, 7);  //for morning 7:00 AM\n//var today_date = new Date(2020, 7, 18, 14);  //for afternoon 2:00 PM\nvar today_date = new Date(2020, 7, 18, 21);  //for night 10:00 PM\n\nvar greeting = \"\";\nvar curr_hours = today_date.getHours();\nif (curr_hours >= 1 && curr_hours <= 11){\n  greeting = \"Good Morning\";\n} else if (curr_hours >= 12 && curr_hours <= 19){\n  greeting = \"Good Afternoon\";\n} else {\n  greeting = \"Good Night\";\n}\n\nvar weekday = new Array(7);\nweekday[0] = \"Sunday\";\nweekday[1] = \"Monday\";\nweekday[2] = \"Tuesday\";\nweekday[3] = \"Wednesday\";\nweekday[4] = \"Thursday\";\nweekday[5] = \"Friday\";\nweekday[6] = \"Saturday\";\n\nvar day_of_week = weekday[today_date.getDay()];\n\nReactDOM.render(\n/*\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n*/\n\n  // The React Way\n  <React.Fragment>\n    <h1 className=\"center_text\">Hello {my_name}, {greeting} !</h1>\n    <div className=\"time_box\">\n      <h1 className=\"time_text\">{today_date.toLocaleTimeString()}</h1>\n    </div>\n    <h1 className=\"center_text\">{day_of_week}</h1>\n    <h2 className=\"center_text\">{today_date.toLocaleDateString('en-GB')}</h2>\n    <br /><br /><br />\n    {/*\n    <h2>2 + 3 = {2 + 3}</h2>\n    <h2>Random number = {Math.round(Math.random() * 100)}</h2>\n    <h2>{`My full name is : ${my_name} ${last_name}`}</h2>\n    <h2>{`Today's date is : ${today_date.toLocaleDateString()}`}</h2>\n    <h2>{`Current local time is : ${today_date.toLocaleTimeString ()}`}</h2>\n    */}\n\n    <h1 className=\"heading boxed\">Notes:</h1>\n    <p contenteditable=\"true\" className=\"center_text\">This text is editable. Try to change this text. Click here and type something</p>\n    <br /><br /><br /><br /><br /><br /><br /><br />\n    {/*}\n    <h2 className=\"heading\">Random Image Gallery</h2>\n    <br />\n    <div className=\"img_div\">\n      <img src=\"https://picsum.photos/200/300\" alt=\"Some random images\" />\n      <img src=\"https://picsum.photos/201/301\" alt=\"Some random images\" />\n      <img src=\"https://picsum.photos/202/302\" alt=\"Some random images\" />\n      <img src=\"https://picsum.photos/203/303\" alt=\"Some random images\" />\n      <img src=\"https://picsum.photos/204/304\" alt=\"Some random images\" />\n    </div>\n    <br /><br /><br />\n    <div className=\"img_div\">\n      <img src=\"https://picsum.photos/205/305\" alt=\"Some random images\" />\n      <img src=\"https://picsum.photos/206/306\" alt=\"Some random images\" />\n      <img src=\"https://picsum.photos/207/307\" alt=\"Some random images\" />\n      <img src=\"https://picsum.photos/208/308\" alt=\"Some random images\" />\n      <img src=\"https://picsum.photos/209/309\" alt=\"Some random images\" />\n    </div>\n    <br /><br /><br />\n    {*/}\n    <h4 className=\"center_text\">{`${my_name} ${last_name}`}</h4>  \n  </React.Fragment>,  // Also known as JSX (javascript extension or javascript XML) using babble\n  document.getElementById('root')\n  );\n\n\n  // The Simple Javascrippt way\n  /*\n  var h2 = document.createElement(\"h2\");\n  h2.innerHTML = \"Hi World !\";\n  document.getElementById('root').appendChild(h2);\n  */\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}